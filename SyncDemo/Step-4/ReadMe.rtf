{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 1) Where is sync? Sync process starting is crucial, important to keep track of the status and we cannot start the sync process more than once.\
\
2) - (void)startSync\
first checks if the sync is already in progress, and if not, sets the syncInProgress property. It then uses GCD to kick off an asynchronous block that calls your downloadDataForRegisteredObjects: method.\
\
3) AppDelegate Now register your NSManagedObject classes and start the sync - #import "SDSyncEngine.h" #import "Holiday.h" #import "Birthday.h"\
\
4) This registers the Holiday and Birthday classes with the sync engine in -application:didFinishLaunchingWithOptions:; you can add any managedObject class to sync in this manner.\
\
5) call startSync, whenever application becomes active.\
\
6) Run the application. Before running the application make sure you put your app keys in SDAFParseClient. Check logs inside console.\
\
7) Persist this data to local storage. The key concept here is to perform as many network operations as possible in a single batch. It will help us to reduce network traffic. We should queue all requests and save the responses off to disk before processing them.\
\
8) #pragma mark - File Management in SDSyncEngine.m\
\
9) - (NSURL *)applicationCacheDirectory & - (NSURL *)JSONDataRecordsDirectory\
return an NSURL to a location on disk where the files will reside.\
\
10) - (void)writeJSONResponse:(id)response toDiskForClassWithName:(NSString *)className\
each response is saved to disk as its respective class name\
\
11) The objects which are blank on parse data-browser are represented as NSNull in objective C. AFNetworking will internally translate to NSNull objects when converted to an NSDictionary. It\'92s not possible to save NSNull, i.e. nothing! Therefore, we must remove all of the NSNull objects before persisting data.\
\
12) It\'92s to modify Comment 1 we wrote in Step-3. Instead of logging the data, we will write it in a file.\
\
13) Run the app and see which kind of file it\'92s creating.\
\
14) We have successfully finished the sync process.}